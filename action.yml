name: Release
description: Automated releases via release-please
inputs:
  create-major-minor-tags:
    description: Create major/minor tags automatically on release (e.g. v1, v1.1)
    required: false
    default: "false"
  prerelease:
    description: Create a pre-release (e.g. v1.0.0-0)
    required: false
    default: ${{ github.ref_name == 'dev' }}
  repo-token:
    description: GitHub token (e.g. secrets.GITHUB_TOKEN)
    required: true
  github-app-id:
    description: Installed GitHub App Id (e.g. secrets.UGRC_RELEASE_BOT_APP_ID)
    required: true
  github-app-key:
    description: Installed GitHub App Key (e.g. secrets.UGRC_RELEASE_BOT_APP_KEY)
    required: true
  github-app-name:
    description: Installed GitHub Name (e.g. secrets.UGRC_RELEASE_BOT_NAME)
    required: true
  github-app-email:
    description: Installed GitHub Email (e.g. secrets.UGRC_RELEASE_BOT_EMAIL)
    required: true
  release-type:
    description: Release Please release type (python, simple, node)
    required: false
    default: node
  extra-files:
    description: Extra files in which release please should bump the version
    required: false
outputs:
  release_created:
    description: A release was successfully created
    value: ${{ steps.semantic-release.outputs.new_release_published }}
  released_version:
    description: The version number that was released
    value: ${{ steps.semantic-release.outputs.new_release_version }}

runs:
  using: "composite"
  steps:
    - name: 🪙 Convert token
      if: ${{ !env.ACT }}
      uses: actions/create-github-app-token@v1
      id: generate_token
      with:
        app-id: ${{ inputs.github-app-id }}
        private-key: ${{ inputs.github-app-key }}

    - name: ⬇️ Set up code
      uses: actions/checkout@v4
      with:
        show-progress: false
        fetch-depth: 0
        token: ${{ steps.generate_token.outputs.token }}

    - name: Get appropriate config file
      id: config-file
      shell: bash
      run: |
        echo "Getting semantic-release config file"
        echo "contents=$(cat ${{ github.action_path }}/resources/${{ inputs.release-type }}.releaserc.json | tr -d '[:space:]')" >> $GITHUB_OUTPUT
        touch .releaserc.json

    - name: 🔀 Create/merge release config file
      uses: RadovanPelka/github-action-json@c1e93581d313d6e1d56f7f67582d4051674ebc57
      with:
        path: .releaserc.json
        replaceWith: ${{ steps.config-file.outputs.contents }}

    - name: 🎁 Semantic Release
      id: semantic-release
      uses: cycjimmy/semantic-release-action@v4.1.0
      with:
        extra_plugins: |
          @semantic-release/changelog
          semantic-release-pypi
        repository_url: ${{ github.repositoryUrl }}

    - name: 🧹 Clean up
      shell: bash
      run: |
        rm -f .releaserc.json
        gh api repos/${{ github.repository }}/git/refs/tags/${{ steps.semantic-release.outputs.new_release_version }} -X DELETE
      env:
        GH_TOKEN: ${{ github.token }}

    - name: Create pull request
      uses: peter-evans/create-pull-request@v6
      with:
        token: ${{ steps.generate_token.outputs.token }}
        committer: ${{ inputs.github-app-name }} <${{ inputs.github-app-email }}>
        author: ${{ inputs.github-app-name }} <${{ inputs.github-app-email }}>
        title: "chore: release v${{ steps.semantic-release.outputs.new_release_version }}"
        body: |
          This PR was created automatically by [agrc/release-composite-action](https://github.com/agrc/release-composite-action).

          Release notes:

          ${{ steps.semantic-release.outputs.new_release_notes }}
        labels: release
        commit-message: "chore: release v${{ steps.semantic-release.outputs.new_release_version }}"

    - name: 🔑 Set git user
      shell: bash
      if: ${{ steps.semantic-release.outputs.new_release_published && inputs.prerelease != 'true' }}
      run: |
        git config user.name "${{ inputs.github-app-name }}"
        git config user.email "${{ inputs.github-app-email }}"

    - name: 🏷️ Tag major and minor versions
      shell: bash
      if: ${{ steps.semantic-release.outputs.new_release_published && inputs.create-major-minor-tags == 'true' && inputs.prerelease != 'true' }}
      run: |
        echo "deleting existing tags, if any"
        git tag -d v${{ steps.release-please.outputs.major }} || true
        git tag -d v${{ steps.release-please.outputs.major }}.${{ steps.release-please.outputs.minor }} || true
        git push origin :v${{ steps.release-please.outputs.major }} || true
        git push origin :v${{ steps.release-please.outputs.major }}.${{ steps.release-please.outputs.minor }} || true
        echo "creating new tags"
        git tag -a v${{ steps.release-please.outputs.major }} -m "Release v${{ steps.release-please.outputs.major }}"
        git tag -a v${{ steps.release-please.outputs.major }}.${{ steps.release-please.outputs.minor }} -m "Release v${{ steps.release-please.outputs.major }}.${{ steps.release-please.outputs.minor }}"
        git push origin v${{ steps.release-please.outputs.major }}
        git push origin v${{ steps.release-please.outputs.major }}.${{ steps.release-please.outputs.minor }}
