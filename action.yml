name: Release
description: Automated releases via release-please
inputs:
  create-major-minor-tags:
    description: Create major/minor tags automatically on release (e.g. v1, v1.1)
    required: false
    default: "false"
  prerelease:
    description: Create a pre-release (e.g. v1.0.0-0)
    required: false
    default: ${{ github.ref_name == 'dev' }}
  repo-token:
    description: GitHub token (e.g. secrets.GITHUB_TOKEN). This repo-specific token is required so that we can get the owner and repo name.
    required: true
  github-app-id:
    description: Installed GitHub App Id (e.g. secrets.UGRC_RELEASE_BOT_APP_ID)
    required: true
  github-app-key:
    description: Installed GitHub App Key (e.g. secrets.UGRC_RELEASE_BOT_APP_KEY)
    required: true
  github-app-name:
    description: Installed GitHub Name (e.g. secrets.UGRC_RELEASE_BOT_NAME)
    required: true
  github-app-email:
    description: Installed GitHub Email (e.g. secrets.UGRC_RELEASE_BOT_EMAIL)
    required: true
  release-type:
    description: Release Please release type
    required: false
    default: node
  extra-files:
    description: Extra files in which release please should bump the version
    required: false
outputs:
  release_created:
    description: A release was successfully created
    value: ${{ steps.create-github-release.outputs.release_created == 'yes' }}
  released_version:
    description: The version number that was released
    value: ${{ steps.create-github-release.outputs.release_created == 'yes' && steps.get-next-version.outputs.version }}

runs:
  using: "composite"
  steps:
    - name: 🪙 Convert token
      if: ${{ !env.ACT }}
      uses: actions/create-github-app-token@v1
      id: generate-token
      with:
        app-id: ${{ inputs.github-app-id }}
        private-key: ${{ inputs.github-app-key }}

    - name: 🎭 Mock Convert token
      if: ${{ env.ACT }}
      id: mock-generate-token
      shell: bash
      run: |
        echo "token=${{ env.TEST_TOKEN }}" >> $GITHUB_OUTPUT

    - name: ⬇️ Set up code
      uses: actions/checkout@v4
      with:
        show-progress: false
        token: ${{ steps.generate-token.outputs.token || steps.mock-generate-token.outputs.token }}

    - name: 🤔 Is this a release PR merge
      id: is-release-pr
      shell: bash
      run: |
        latest_commit_message=$(git log -1 --pretty=format:%s)
        if [[ $latest_commit_message == "chore: release v"* ]]; then
          echo "this workflow was triggered by a release PR"
          echo "result=yes" >> $GITHUB_OUTPUT
        else
          echo "this workflow was not triggered by a release PR"
          echo "result=no" >> $GITHUB_OUTPUT
        fi

    - name: ⏩ Get next version
      if: ${{ !env.ACT }}
      id: get-next-version
      uses: agrc/get-next-version-action@v1
      with:
        prerelease: ${{ inputs.prerelease }}
        repo-token: ${{ inputs.repo-token }}

    - name: 🎭 Mock Get next version
      if: ${{ env.ACT }}
      id: mock-get-next-version
      shell: bash
      run: |
        echo "version=9.9.9" >> $GITHUB_OUTPUT

    - name: 📦 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: lts/*

    - name: Set up Release Please
      shell: bash
      run: |
        git clone https://github.com/stdavis/release-please
        cd release-please
        git switch stable-fix
        echo "installing dependencies"
        npm install

    - name: 🚀 Create release PR
      id: create-release-pr
      if: steps.is-release-pr.outputs.result == 'no'
      shell: bash
      run: |
        node release-please/build/src/bin/release-please.js release-pr \
          --pull-request-title-pattern "chore: release v\${version}" \
          --pull-request-header " " \
          --changelog-sections "feat,fix,deps,docs,style" \
          --token ${{ steps.generate-token.outputs.token || steps.mock-generate-token.outputs.token }} \
          --repo-url ${{ github.repositoryUrl || 'https://github.com/agrc/release-composite-action' }} \
          --target-branch ${{ github.ref_name }} \
          --release-type ${{ inputs.release-type }} \
          --extra-files "${{ inputs.extra-files }}" \
          --release-as ${{ steps.get-next-version.outputs.version || steps.mock-get-next-version.outputs.version }}

    - name: 🚀 Create GitHub release
      id: create-github-release
      if: steps.is-release-pr.outputs.result == 'yes'
      shell: bash
      run: |
        node release-please/build/src/bin/release-please.js github-release \
          --token ${{ steps.generate-token.outputs.token || steps.mock-generate-token.outputs.token }} \
          --repo-url ${{ github.repositoryUrl || 'https://github.com/agrc/release-composite-action' }} \
          --target-branch ${{ github.ref_name }} \
          --prerelease ${{ inputs.prerelease }} \
          --release-type ${{ inputs.release-type }}

        echo "release_created=yes" >> $GITHUB_OUTPUT

    - name: 🔑 Set git user
      shell: bash
      run: |
        git config user.name "${{ inputs.github-app-name }}"
        git config user.email "${{ inputs.github-app-email }}"

    - name: ✔ Commit
      shell: bash
      run: |
        git add .release-please-manifest.json
        git add release-please-config.json
        git diff --staged --quiet || git commit -m "chore: configure release please [skip ci]"
        git push

    - name: 🚀 Create release
      uses: google-github-actions/release-please-action@v4
      id: release-please
      with:
        token: ${{ steps.generate_token.outputs.token }}
        config-file: release-please-config.json
        manifest-file: .release-please-manifest.json
        target-branch: ${{ github.ref_name }}

    - name: 🏷️ Tag major and minor versions
      shell: bash
      if: ${{ inputs.create-major-minor-tags == 'true' && steps.is-release-pr.outputs.result == 'yes' && inputs.prerelease != 'true' }}
      run: |
        echo "deleting existing tags, if any"
        git tag -d v${{ steps.release-please.outputs.major }} || true
        git tag -d v${{ steps.release-please.outputs.major }}.${{ steps.release-please.outputs.minor }} || true
        git push origin :v${{ steps.release-please.outputs.major }} || true
        git push origin :v${{ steps.release-please.outputs.major }}.${{ steps.release-please.outputs.minor }} || true
        echo "creating new tags"
        git tag -a v${{ steps.release-please.outputs.major }} -m "Release v${{ steps.release-please.outputs.major }}"
        git tag -a v${{ steps.release-please.outputs.major }}.${{ steps.release-please.outputs.minor }} -m "Release v${{ steps.release-please.outputs.major }}.${{ steps.release-please.outputs.minor }}"
        git push origin v${{ steps.release-please.outputs.major }}
        git push origin v${{ steps.release-please.outputs.major }}.${{ steps.release-please.outputs.minor }}
